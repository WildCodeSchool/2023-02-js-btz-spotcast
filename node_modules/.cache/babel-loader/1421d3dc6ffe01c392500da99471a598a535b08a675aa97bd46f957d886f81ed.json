{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guill\\\\Desktop\\\\wild\\\\2023-02-js-btz-spotcast\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Wind from \"../components/widgets/wind/Wind\";\nimport \"./Dashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  //Setting up a realtime clock\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    const timer = setInterval(() => setDate(new Date()), 60000);\n    return function cleanup() {\n      clearInterval(timer);\n    };\n  });\n\n  //fetching the wind infos\n  const [wind, setWind] = useState([]);\n  useEffect(() => {\n    axios.get(\"https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=windspeed_10m,winddirection_10m\").then(res => res.data).then(data => {\n      setWind(data.hourly);\n    });\n  }, []);\n\n  //getting the index of current time in 'wind' array\n  const [timeStampIndex, setTimeStampIndex] = useState('');\n  const timeStamp = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}T${String(date.getHours()).padStart(2, \"0\")}:00`;\n  useEffect(() => {\n    wind.time &&\n    //checking if 'wind.time' is already loaded\n    setTimeStampIndex(wind.time.indexOf(timeStamp));\n  }, [wind.time]); //setup timeStampIndex after ' wind.time' is updated\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: /*#__PURE__*/_jsxDEV(Wind, {\n      ...wind,\n      timeStampIndex: timeStampIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"nixYyo62hq7IWXm4DPfYsKLcAnU=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","Wind","jsxDEV","_jsxDEV","Dashboard","_s","date","setDate","Date","timer","setInterval","cleanup","clearInterval","wind","setWind","get","then","res","data","hourly","timeStampIndex","setTimeStampIndex","timeStamp","getFullYear","String","getMonth","padStart","getDate","getHours","time","indexOf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/guill/Desktop/wild/2023-02-js-btz-spotcast/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Wind from \"../components/widgets/wind/Wind\";\r\nimport \"./Dashboard.css\";\r\n\r\nconst Dashboard = () => {\r\n  //Setting up a realtime clock\r\n  const [date, setDate] = useState(new Date());\r\n  \r\n  useEffect(() => {\r\n    const timer = setInterval(() => setDate(new Date()), 60000);\r\n    return function cleanup() {\r\n      clearInterval(timer);\r\n    };\r\n  });\r\n\r\n  //fetching the wind infos\r\n  const [wind, setWind] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        \"https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=windspeed_10m,winddirection_10m\"\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        setWind(data.hourly);\r\n      });\r\n  }, []);\r\n\r\n  //getting the index of current time in 'wind' array\r\n  const [timeStampIndex, setTimeStampIndex] = useState('');\r\n\r\n  const timeStamp = \r\n  `${date.getFullYear()}-${String(date.getMonth() +1).padStart(2,\"0\")}-${String(date.getDate()).padStart(2,\"0\")}T${String(date.getHours()).padStart(2,\"0\")}:00`;\r\n\r\n\r\n  useEffect(() => {\r\n    wind.time && //checking if 'wind.time' is already loaded\r\n    setTimeStampIndex(wind.time.indexOf(timeStamp));\r\n  }, [wind.time]); //setup timeStampIndex after ' wind.time' is updated\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <Wind \r\n        {...wind} \r\n        timeStampIndex={timeStampIndex}\r\n        />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,iCAAiC;AAClD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAIS,IAAI,EAAE,CAAC;EAE5CV,SAAS,CAAC,MAAM;IACd,MAAMW,KAAK,GAAGC,WAAW,CAAC,MAAMH,OAAO,CAAC,IAAIC,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC;IAC3D,OAAO,SAASG,OAAOA,CAAA,EAAG;MACxBC,aAAa,CAACH,KAAK,CAAC;IACtB,CAAC;EACH,CAAC,CAAC;;EAEF;EACA,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACdE,KAAK,CACFe,GAAG,CACF,8GAA8G,CAC/G,CACAC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CACvBF,IAAI,CAAEE,IAAI,IAAK;MACdJ,OAAO,CAACI,IAAI,CAACC,MAAM,CAAC;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMuB,SAAS,GACd,GAAEhB,IAAI,CAACiB,WAAW,EAAG,IAAGC,MAAM,CAAClB,IAAI,CAACmB,QAAQ,EAAE,GAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAE,IAAGF,MAAM,CAAClB,IAAI,CAACqB,OAAO,EAAE,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAE,IAAGF,MAAM,CAAClB,IAAI,CAACsB,QAAQ,EAAE,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAE,KAAI;EAG7J5B,SAAS,CAAC,MAAM;IACde,IAAI,CAACgB,IAAI;IAAI;IACbR,iBAAiB,CAACR,IAAI,CAACgB,IAAI,CAACC,OAAO,CAACR,SAAS,CAAC,CAAC;EACjD,CAAC,EAAE,CAACT,IAAI,CAACgB,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEjB,oBACE1B,OAAA;IAAK4B,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxB7B,OAAA,CAACF,IAAI;MAAA,GACCY,IAAI;MACRO,cAAc,EAAEA;IAAe;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAC7B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEV,CAAC;AAAC/B,EAAA,CA7CID,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AA+Cf,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}