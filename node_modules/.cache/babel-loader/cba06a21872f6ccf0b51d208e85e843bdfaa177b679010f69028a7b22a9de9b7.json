{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ericg\\\\OneDrive\\\\Bureau\\\\Pro\\\\Code\\\\Projet-2-SpotCast\\\\2023-02-js-btz-spotcast\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { createContext } from 'react';\nimport Wind from \"../components/widgets/wind/Wind\";\nimport MeteoDay from \"../components/widgets/meteo-day/MeteoDay\";\nimport MeteoThreeDay from \"../components/widgets/meteo-three-day/MeteoThreeDay\";\nimport NavBar from \"../components/widgets/navbar/NavBar\";\nimport ForecastCardBackground from \"../components/forecast-cards/ForecastCardBackground\";\nimport \"./Dashboard.css\";\nimport Tide from \"../components/widgets/tide/Tide\";\nimport Sunset from \"../components/widgets/sunset/Sunset\";\n\n// instancier un useContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const selectedSpotsContext = /*#__PURE__*/createContext();\nconst Dashboard = () => {\n  _s();\n  //setting up Selected Spot \n  const [selectedSpots, setSelectedSpots] = useState([{\n    id: 0,\n    name: \"Biarritz - La Côte des Basques\",\n    latitude: \"43.48\",\n    longitude: \"-1.56\",\n    webcam: \"https://gosurf.fr/webcam/fr/84/Biarritz-La-Grande-Plage\"\n  }]);\n\n  //usdeState to check when the Open-Meteo API is loaded\n  const [onLoadOpenMeteo, setOnLoadOpenMeteo] = useState(true);\n\n  //Setting up a realtime clock\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    const timer = setInterval(() => setDate(new Date()), 60000);\n    return function () {\n      clearInterval(timer);\n    };\n  });\n  const timeStamp = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}T${String(date.getHours()).padStart(2, \"0\")}:00`;\n\n  //fetching the wind infos\n  const [wind, setWind] = useState([]);\n  useEffect(() => {\n    axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${selectedSpots[0].latitude}&longitude=${selectedSpots[0].longitude}&hourly=windspeed_10m,winddirection_10m&timezone=Europe%2FBerlin`).then(res => res.data).then(data => {\n      setWind(data.hourly);\n      setOnLoadOpenMeteo(false);\n    });\n  }, []);\n\n  //fetching the meteo infos\n  const [meteo, setMeteo] = useState([]);\n  const [onLoadMeteo, setOnLoadMeteo] = useState(true);\n  useEffect(() => {\n    axios.get(\"https://api.open-meteo.com/v1/forecast?latitude=43.48&longitude=-1.56&hourly=temperature_2m,weathercode&timezone=Europe%2FBerlin\").then(res => res.data).then(data => {\n      setMeteo(data.hourly);\n      setOnLoadMeteo(false);\n    });\n  }, []);\n\n  //fetching meteo infos at 3 day.\n  const [meteo3D, setMeteo3D] = useState([]);\n  const [onLoadMeteo3D, setOnLoadMeteo3D] = useState(true);\n  useEffect(() => {\n    axios.get(\"https://api.open-meteo.com/v1/forecast?latitude=43.48&longitude=-1.56&daily=weathercode,temperature_2m_max,temperature_2m_min&timezone=Europe%2FBerlin\").then(res => res.data).then(data => {\n      setMeteo3D(data.daily);\n      setOnLoadMeteo3D(false);\n    });\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => setDate(new Date()), 60000);\n    return function () {\n      clearInterval(timer);\n    };\n  });\n\n  //getting the index of current time in API array\n  const [timeStampIndex, setTimeStampIndex] = useState('');\n  useEffect(() => {\n    wind.time &&\n    //checking if 'wind.time' is already loaded\n    setTimeStampIndex(wind.time.indexOf(timeStamp));\n  }, [wind.time]); //setup timeStampIndex after ' wind.time' is updated\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"widgets-container\",\n      children: [/*#__PURE__*/_jsxDEV(Wind, {\n        ...wind,\n        timeStampIndex: timeStampIndex,\n        onLoadOpenMeteo: onLoadOpenMeteo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tide, {\n        date: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MeteoDay, {\n        ...meteo,\n        onLoadMeteo: onLoadMeteo,\n        timeStampIndex: timeStampIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(MeteoThreeDay, {\n        meteo3D: meteo3D,\n        onLoadMeteo3D: onLoadMeteo3D\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sunset, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), selectedSpots.map(selectedSpots => /*#__PURE__*/_jsxDEV(ForecastCardBackground, {\n        selectedSpots: selectedSpots\n      }, selectedSpots.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"olRhwv2okobw64wZJCVRNJjEKXM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","createContext","Wind","MeteoDay","MeteoThreeDay","NavBar","ForecastCardBackground","Tide","Sunset","jsxDEV","_jsxDEV","selectedSpotsContext","Dashboard","_s","selectedSpots","setSelectedSpots","id","name","latitude","longitude","webcam","onLoadOpenMeteo","setOnLoadOpenMeteo","date","setDate","Date","timer","setInterval","clearInterval","timeStamp","getFullYear","String","getMonth","padStart","getDate","getHours","wind","setWind","get","then","res","data","hourly","meteo","setMeteo","onLoadMeteo","setOnLoadMeteo","meteo3D","setMeteo3D","onLoadMeteo3D","setOnLoadMeteo3D","daily","timeStampIndex","setTimeStampIndex","time","indexOf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/ericg/OneDrive/Bureau/Pro/Code/Projet-2-SpotCast/2023-02-js-btz-spotcast/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { createContext } from 'react';\r\nimport Wind from \"../components/widgets/wind/Wind\";\r\nimport MeteoDay from \"../components/widgets/meteo-day/MeteoDay\"\r\nimport MeteoThreeDay from \"../components/widgets/meteo-three-day/MeteoThreeDay\"\r\nimport NavBar from \"../components/widgets/navbar/NavBar\"\r\nimport ForecastCardBackground from \"../components/forecast-cards/ForecastCardBackground\";\r\nimport \"./Dashboard.css\";\r\nimport Tide from \"../components/widgets/tide/Tide\";\r\nimport Sunset from \"../components/widgets/sunset/Sunset\";\r\n\r\n// instancier un useContext\r\nexport const selectedSpotsContext = createContext();\r\n\r\n\r\nconst Dashboard = () => {\r\n\r\n\r\n\r\n\r\n\r\n  //setting up Selected Spot \r\n  const [selectedSpots, setSelectedSpots] = useState(\r\n    [{\r\n    id : 0,\r\n    name : \"Biarritz - La Côte des Basques\",\r\n    latitude : \"43.48\",\r\n    longitude : \"-1.56\",\r\n    webcam : \"https://gosurf.fr/webcam/fr/84/Biarritz-La-Grande-Plage\"\r\n  }],\r\n)\r\n\r\n  //usdeState to check when the Open-Meteo API is loaded\r\n  const [onLoadOpenMeteo, setOnLoadOpenMeteo] = useState(true);\r\n\r\n  //Setting up a realtime clock\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => setDate(new Date()), 60000);\r\n    return function () {\r\n      clearInterval(timer);\r\n    };\r\n  });\r\n\r\n  const timeStamp = \r\n  `${date.getFullYear()}-${String(date.getMonth() +1).padStart(2,\"0\")}-${String(date.getDate()).padStart(2,\"0\")}T${String(date.getHours()).padStart(2,\"0\")}:00`;\r\n\r\n  //fetching the wind infos\r\n  const [wind, setWind] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.open-meteo.com/v1/forecast?latitude=${selectedSpots[0].latitude}&longitude=${selectedSpots[0].longitude}&hourly=windspeed_10m,winddirection_10m&timezone=Europe%2FBerlin`\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        setWind(data.hourly);\r\n        setOnLoadOpenMeteo(false);\r\n      });\r\n  }, []);\r\n\r\n  //fetching the meteo infos\r\n  const [meteo, setMeteo] = useState([]);\r\n  const [onLoadMeteo, setOnLoadMeteo] = useState(true)\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        \"https://api.open-meteo.com/v1/forecast?latitude=43.48&longitude=-1.56&hourly=temperature_2m,weathercode&timezone=Europe%2FBerlin\"\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        setMeteo(data.hourly);\r\n        setOnLoadMeteo(false)\r\n      });\r\n  }, []);\r\n\r\n  //fetching meteo infos at 3 day.\r\n  const [meteo3D, setMeteo3D] = useState([]);\r\n  const [onLoadMeteo3D, setOnLoadMeteo3D] = useState(true)\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        \"https://api.open-meteo.com/v1/forecast?latitude=43.48&longitude=-1.56&daily=weathercode,temperature_2m_max,temperature_2m_min&timezone=Europe%2FBerlin\"\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        setMeteo3D(data.daily);\r\n        setOnLoadMeteo3D(false)\r\n      });\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => setDate(new Date()), 60000);\r\n    return function () {\r\n      clearInterval(timer);\r\n    };\r\n  });\r\n\r\n\r\n  //getting the index of current time in API array\r\n  const [timeStampIndex, setTimeStampIndex] = useState('');\r\n\r\n  useEffect(() => {\r\n    wind.time && //checking if 'wind.time' is already loaded\r\n      setTimeStampIndex(wind.time.indexOf(timeStamp));\r\n  }, [wind.time]); //setup timeStampIndex after ' wind.time' is updated\r\n\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <NavBar/>\r\n      <div className=\"widgets-container\">\r\n        <Wind\r\n          {...wind}\r\n          timeStampIndex={timeStampIndex}\r\n          onLoadOpenMeteo = {onLoadOpenMeteo}\r\n        />\r\n        <Tide\r\n          date={date}\r\n        />\r\n\r\n         <MeteoDay\r\n        {...meteo}\r\n        onLoadMeteo={onLoadMeteo}\r\n        timeStampIndex={timeStampIndex}\r\n        />\r\n\r\n        <MeteoThreeDay\r\n        meteo3D={meteo3D}\r\n        onLoadMeteo3D={onLoadMeteo3D}\r\n        />\r\n\r\n        <Sunset />\r\n\r\n        {selectedSpots.map(selectedSpots => (\r\n          <ForecastCardBackground\r\n          key={selectedSpots.id}\r\n          selectedSpots={selectedSpots}\r\n          />\r\n        ))}\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,OAAO;AACrC,OAAOC,IAAI,MAAM,iCAAiC;AAClD,OAAOC,QAAQ,MAAM,0CAA0C;AAC/D,OAAOC,aAAa,MAAM,qDAAqD;AAC/E,OAAOC,MAAM,MAAM,qCAAqC;AACxD,OAAOC,sBAAsB,MAAM,qDAAqD;AACxF,OAAO,iBAAiB;AACxB,OAAOC,IAAI,MAAM,iCAAiC;AAClD,OAAOC,MAAM,MAAM,qCAAqC;;AAExD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,oBAAoB,gBAAGV,aAAa,EAAE;AAGnD,MAAMW,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAMtB;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAChD,CAAC;IACDiB,EAAE,EAAG,CAAC;IACNC,IAAI,EAAG,gCAAgC;IACvCC,QAAQ,EAAG,OAAO;IAClBC,SAAS,EAAG,OAAO;IACnBC,MAAM,EAAG;EACX,CAAC,CAAC,CACH;;EAEC;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACA,MAAM,CAACwB,IAAI,EAAEC,OAAO,CAAC,GAAGzB,QAAQ,CAAC,IAAI0B,IAAI,EAAE,CAAC;EAE5C3B,SAAS,CAAC,MAAM;IACd,MAAM4B,KAAK,GAAGC,WAAW,CAAC,MAAMH,OAAO,CAAC,IAAIC,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC;IAC3D,OAAO,YAAY;MACjBG,aAAa,CAACF,KAAK,CAAC;IACtB,CAAC;EACH,CAAC,CAAC;EAEF,MAAMG,SAAS,GACd,GAAEN,IAAI,CAACO,WAAW,EAAG,IAAGC,MAAM,CAACR,IAAI,CAACS,QAAQ,EAAE,GAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAE,IAAGF,MAAM,CAACR,IAAI,CAACW,OAAO,EAAE,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAE,IAAGF,MAAM,CAACR,IAAI,CAACY,QAAQ,EAAE,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAE,KAAI;;EAE7J;EACA,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACdE,KAAK,CACFsC,GAAG,CACD,mDAAkDxB,aAAa,CAAC,CAAC,CAAC,CAACI,QAAS,cAAaJ,aAAa,CAAC,CAAC,CAAC,CAACK,SAAU,kEAAiE,CACvL,CACAoB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CACvBF,IAAI,CAAEE,IAAI,IAAK;MACdJ,OAAO,CAACI,IAAI,CAACC,MAAM,CAAC;MACpBpB,kBAAkB,CAAC,KAAK,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC8C,WAAW,EAAEC,cAAc,CAAC,GAAG/C,QAAQ,CAAC,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACdE,KAAK,CACFsC,GAAG,CACF,kIAAkI,CACnI,CACAC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CACvBF,IAAI,CAAEE,IAAI,IAAK;MACdG,QAAQ,CAACH,IAAI,CAACC,MAAM,CAAC;MACrBI,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkD,aAAa,EAAEC,gBAAgB,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EAExDD,SAAS,CAAC,MAAM;IACdE,KAAK,CACFsC,GAAG,CACF,wJAAwJ,CACzJ,CACAC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CACvBF,IAAI,CAAEE,IAAI,IAAK;MACdO,UAAU,CAACP,IAAI,CAACU,KAAK,CAAC;MACtBD,gBAAgB,CAAC,KAAK,CAAC;IACzB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAGNpD,SAAS,CAAC,MAAM;IACd,MAAM4B,KAAK,GAAGC,WAAW,CAAC,MAAMH,OAAO,CAAC,IAAIC,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC;IAC3D,OAAO,YAAY;MACjBG,aAAa,CAACF,KAAK,CAAC;IACtB,CAAC;EACH,CAAC,CAAC;;EAGF;EACA,MAAM,CAAC0B,cAAc,EAAEC,iBAAiB,CAAC,GAAGtD,QAAQ,CAAC,EAAE,CAAC;EAExDD,SAAS,CAAC,MAAM;IACdsC,IAAI,CAACkB,IAAI;IAAI;IACXD,iBAAiB,CAACjB,IAAI,CAACkB,IAAI,CAACC,OAAO,CAAC1B,SAAS,CAAC,CAAC;EACnD,CAAC,EAAE,CAACO,IAAI,CAACkB,IAAI,CAAC,CAAC,CAAC,CAAC;;EAGjB,oBACE5C,OAAA;IAAK8C,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB/C,OAAA,CAACL,MAAM;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eACTnD,OAAA;MAAK8C,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChC/C,OAAA,CAACR,IAAI;QAAA,GACCkC,IAAI;QACRgB,cAAc,EAAEA,cAAe;QAC/B/B,eAAe,EAAIA;MAAgB;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACnC,eACFnD,OAAA,CAACH,IAAI;QACHgB,IAAI,EAAEA;MAAK;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACX,eAEDnD,OAAA,CAACP,QAAQ;QAAA,GACNwC,KAAK;QACTE,WAAW,EAAEA,WAAY;QACzBO,cAAc,EAAEA;MAAe;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC7B,eAEFnD,OAAA,CAACN,aAAa;QACd2C,OAAO,EAAEA,OAAQ;QACjBE,aAAa,EAAEA;MAAc;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC3B,eAEFnD,OAAA,CAACF,MAAM;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,EAET/C,aAAa,CAACgD,GAAG,CAAChD,aAAa,iBAC9BJ,OAAA,CAACJ,sBAAsB;QAEvBQ,aAAa,EAAEA;MAAc,GADxBA,aAAa,CAACE,EAAE;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAGtB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAER,CAAC;AAAChD,EAAA,CArIID,SAAS;AAAAmD,EAAA,GAATnD,SAAS;AAuIf,eAAeA,SAAS;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}