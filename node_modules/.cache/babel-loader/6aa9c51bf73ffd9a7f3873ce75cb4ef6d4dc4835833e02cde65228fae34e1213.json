{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ericg\\\\OneDrive\\\\Bureau\\\\Pro\\\\Code\\\\Projet-2-SpotCast\\\\2023-02-js-btz-spotcast\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { createContext } from 'react';\nimport Wind from \"../components/widgets/wind/Wind\";\nimport MeteoDay from \"../components/widgets/meteo-day/MeteoDay\";\nimport MeteoThreeDay from \"../components/widgets/meteo-three-day/MeteoThreeDay\";\nimport NavBar from \"../components/widgets/navbar/NavBar\";\nimport ForecastCardBackground from \"../components/forecast-cards/ForecastCardBackground\";\nimport \"./Dashboard.css\";\nimport Tide from \"../components/widgets/tide/Tide\";\nimport Sunset from \"../components/widgets/sunset/Sunset\";\n\n// instancier un useContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const selectedSpotsContext = /*#__PURE__*/createContext();\nconst Dashboard = () => {\n  _s();\n  //setting up Selected Spot \n  const [selectedSpots, setSelectedSpots] = useState([]);\n  /*[{\r\n  id : 0,\r\n  name : \"Biarritz - La Côte des Basques\",\r\n  latitude : \"43.48\",\r\n  longitude : \"-1.56\",\r\n  webcam : \"https://gosurf.fr/webcam/fr/84/Biarritz-La-Grande-Plage\"\r\n  }])*/\n\n  console.log(selectedSpots);\n\n  //usdeState to check when the Open-Meteo API is loaded\n  const [onLoadOpenMeteo, setOnLoadOpenMeteo] = useState(true);\n\n  //Setting up a realtime clock\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    const timer = setInterval(() => setDate(new Date()), 60000);\n    return function () {\n      clearInterval(timer);\n    };\n  });\n  const timeStamp = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}-${String(date.getDate()).padStart(2, \"0\")}T${String(date.getHours()).padStart(2, \"0\")}:00`;\n\n  //fetching the wind infos\n  const [wind, setWind] = useState([]);\n  useEffect(() => {\n    axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${selectedSpots[0].latitude}&longitude=${selectedSpots[0].longitude}&hourly=windspeed_10m,winddirection_10m&timezone=Europe%2FBerlin`).then(res => res.data).then(data => {\n      setWind(data.hourly);\n      setOnLoadOpenMeteo(false);\n    });\n  }, []);\n\n  //fetching the meteo infos\n  const [meteo, setMeteo] = useState([]);\n  const [onLoadMeteo, setOnLoadMeteo] = useState(true);\n  useEffect(() => {\n    axios.get(\"https://api.open-meteo.com/v1/forecast?latitude=43.48&longitude=-1.56&hourly=temperature_2m,weathercode&timezone=Europe%2FBerlin\").then(res => res.data).then(data => {\n      setMeteo(data.hourly);\n      setOnLoadMeteo(false);\n    });\n  }, []);\n\n  //fetching meteo infos at 3 day.\n  const [meteo3D, setMeteo3D] = useState([]);\n  const [onLoadMeteo3D, setOnLoadMeteo3D] = useState(true);\n  useEffect(() => {\n    axios.get(\"https://api.open-meteo.com/v1/forecast?latitude=43.48&longitude=-1.56&daily=weathercode,temperature_2m_max,temperature_2m_min&timezone=Europe%2FBerlin\").then(res => res.data).then(data => {\n      setMeteo3D(data.daily);\n      setOnLoadMeteo3D(false);\n    });\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => setDate(new Date()), 60000);\n    return function () {\n      clearInterval(timer);\n    };\n  });\n\n  //getting the index of current time in API array\n  const [timeStampIndex, setTimeStampIndex] = useState('');\n  useEffect(() => {\n    wind.time &&\n    //checking if 'wind.time' is already loaded\n    setTimeStampIndex(wind.time.indexOf(timeStamp));\n  }, [wind.time]); //setup timeStampIndex after ' wind.time' is updated\n\n  console.log(`selectedSpots : ${selectedSpots}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: /*#__PURE__*/_jsxDEV(selectedSpotsContext.Provider, {\n      value: [selectedSpots, setSelectedSpots],\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widgets-container\",\n        children: [/*#__PURE__*/_jsxDEV(Wind, {\n          ...wind,\n          timeStampIndex: timeStampIndex,\n          onLoadOpenMeteo: onLoadOpenMeteo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tide, {\n          date: date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MeteoDay, {\n          ...meteo,\n          onLoadMeteo: onLoadMeteo,\n          timeStampIndex: timeStampIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MeteoThreeDay, {\n          meteo3D: meteo3D,\n          onLoadMeteo3D: onLoadMeteo3D\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Sunset, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), selectedSpots.map(selectedSpots => /*#__PURE__*/_jsxDEV(ForecastCardBackground, {\n          selectedSpots: selectedSpots\n        }, selectedSpots.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"4qwy8yJ2or0OhpwQESdQUcp20Gg=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","createContext","Wind","MeteoDay","MeteoThreeDay","NavBar","ForecastCardBackground","Tide","Sunset","jsxDEV","_jsxDEV","selectedSpotsContext","Dashboard","_s","selectedSpots","setSelectedSpots","console","log","onLoadOpenMeteo","setOnLoadOpenMeteo","date","setDate","Date","timer","setInterval","clearInterval","timeStamp","getFullYear","String","getMonth","padStart","getDate","getHours","wind","setWind","get","latitude","longitude","then","res","data","hourly","meteo","setMeteo","onLoadMeteo","setOnLoadMeteo","meteo3D","setMeteo3D","onLoadMeteo3D","setOnLoadMeteo3D","daily","timeStampIndex","setTimeStampIndex","time","indexOf","className","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","map","id","_c","$RefreshReg$"],"sources":["C:/Users/ericg/OneDrive/Bureau/Pro/Code/Projet-2-SpotCast/2023-02-js-btz-spotcast/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { createContext } from 'react';\r\nimport Wind from \"../components/widgets/wind/Wind\";\r\nimport MeteoDay from \"../components/widgets/meteo-day/MeteoDay\"\r\nimport MeteoThreeDay from \"../components/widgets/meteo-three-day/MeteoThreeDay\"\r\nimport NavBar from \"../components/widgets/navbar/NavBar\"\r\nimport ForecastCardBackground from \"../components/forecast-cards/ForecastCardBackground\";\r\nimport \"./Dashboard.css\";\r\nimport Tide from \"../components/widgets/tide/Tide\";\r\nimport Sunset from \"../components/widgets/sunset/Sunset\";\r\n\r\n// instancier un useContext\r\nexport const selectedSpotsContext = createContext();\r\n\r\n\r\nconst Dashboard = () => {\r\n\r\n\r\n\r\n\r\n\r\n  //setting up Selected Spot \r\n  const [selectedSpots, setSelectedSpots] = useState([])\r\n    /*[{\r\n    id : 0,\r\n    name : \"Biarritz - La Côte des Basques\",\r\n    latitude : \"43.48\",\r\n    longitude : \"-1.56\",\r\n    webcam : \"https://gosurf.fr/webcam/fr/84/Biarritz-La-Grande-Plage\"\r\n  }])*/\r\n\r\n  console.log(selectedSpots)\r\n\r\n  //usdeState to check when the Open-Meteo API is loaded\r\n  const [onLoadOpenMeteo, setOnLoadOpenMeteo] = useState(true);\r\n\r\n  //Setting up a realtime clock\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => setDate(new Date()), 60000);\r\n    return function () {\r\n      clearInterval(timer);\r\n    };\r\n  });\r\n\r\n  const timeStamp = \r\n  `${date.getFullYear()}-${String(date.getMonth() +1).padStart(2,\"0\")}-${String(date.getDate()).padStart(2,\"0\")}T${String(date.getHours()).padStart(2,\"0\")}:00`;\r\n\r\n  //fetching the wind infos\r\n  const [wind, setWind] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.open-meteo.com/v1/forecast?latitude=${selectedSpots[0].latitude}&longitude=${selectedSpots[0].longitude}&hourly=windspeed_10m,winddirection_10m&timezone=Europe%2FBerlin`\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        setWind(data.hourly);\r\n        setOnLoadOpenMeteo(false);\r\n      });\r\n  }, []);\r\n\r\n  //fetching the meteo infos\r\n  const [meteo, setMeteo] = useState([]);\r\n  const [onLoadMeteo, setOnLoadMeteo] = useState(true)\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        \"https://api.open-meteo.com/v1/forecast?latitude=43.48&longitude=-1.56&hourly=temperature_2m,weathercode&timezone=Europe%2FBerlin\"\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        setMeteo(data.hourly);\r\n        setOnLoadMeteo(false)\r\n      });\r\n  }, []);\r\n\r\n  //fetching meteo infos at 3 day.\r\n  const [meteo3D, setMeteo3D] = useState([]);\r\n  const [onLoadMeteo3D, setOnLoadMeteo3D] = useState(true)\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        \"https://api.open-meteo.com/v1/forecast?latitude=43.48&longitude=-1.56&daily=weathercode,temperature_2m_max,temperature_2m_min&timezone=Europe%2FBerlin\"\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        setMeteo3D(data.daily);\r\n        setOnLoadMeteo3D(false)\r\n      });\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => setDate(new Date()), 60000);\r\n    return function () {\r\n      clearInterval(timer);\r\n    };\r\n  });\r\n\r\n\r\n  //getting the index of current time in API array\r\n  const [timeStampIndex, setTimeStampIndex] = useState('');\r\n\r\n  useEffect(() => {\r\n    wind.time && //checking if 'wind.time' is already loaded\r\n      setTimeStampIndex(wind.time.indexOf(timeStamp));\r\n  }, [wind.time]); //setup timeStampIndex after ' wind.time' is updated\r\n\r\n  console.log(`selectedSpots : ${selectedSpots}`)\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <selectedSpotsContext.Provider value={[selectedSpots, setSelectedSpots] }>\r\n        <NavBar/>\r\n        <div className=\"widgets-container\">\r\n          <Wind\r\n            {...wind}\r\n            timeStampIndex={timeStampIndex}\r\n            onLoadOpenMeteo = {onLoadOpenMeteo}\r\n          />\r\n          <Tide\r\n            date={date}\r\n          />\r\n\r\n          <MeteoDay\r\n          {...meteo}\r\n          onLoadMeteo={onLoadMeteo}\r\n          timeStampIndex={timeStampIndex}\r\n          />\r\n\r\n          <MeteoThreeDay\r\n          meteo3D={meteo3D}\r\n          onLoadMeteo3D={onLoadMeteo3D}\r\n          />\r\n\r\n          <Sunset />\r\n\r\n          {selectedSpots.map(selectedSpots => (\r\n            <ForecastCardBackground\r\n            key={selectedSpots.id}\r\n            selectedSpots={selectedSpots}\r\n            />\r\n          ))}\r\n      </div>\r\n    </selectedSpotsContext.Provider>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}